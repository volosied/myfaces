{"version":3,"file":"Monad.js","mappings":"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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\nclass Es2019Array_<T>  extends Array<T>{\n\n    _another: T[];\n\n    constructor(...another: T[]) {\n        super(...another);\n        if((another as any)._another)  {\n            this._another = (another as any)._another;\n        } else {\n            this._another = another;\n        }\n\n        //for testing it definitely runs into this branch because we are on es5 level\n        //if (!(<any>Array.prototype).flatMap) {\n            this.flatMap = (flatMapFun) => this._flatMap(flatMapFun) as any;\n        //}\n        //if (!(<any>Array.prototype).flat) {\n            this.flat = (flatLevel: number = 1) => this._flat(flatLevel);\n        //}\n    }\n\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] {\n        const ret = Array.prototype.map.call(this._another, callbackfn, thisArg);\n        return new (_Es2019Array as any) (... ret);\n    }\n\n    concat(...items): T[] {\n        const ret = Array.prototype.concat.call(this._another, ...items);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    reverse(): T[] {\n        const ret = Array.prototype.reverse.call(this._another);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    slice(start?: number, end?: number): T[] {\n        const ret = Array.prototype.slice.call(this._another, start, end);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        const ret = Array.prototype.splice.call(this._another, start, deleteCount);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        const ret = Array.prototype.filter.call(this._another, predicate, thisArg);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n        const ret = Array.prototype.reduce.call(this._another, callbackfn, initialValue);\n        return ret;\n    }\n\n    /*reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T {\n        const ret = Array.prototype.reduceRight.call(callbackfn, initialValue);\n        return ret;\n    }*/\n\n    private _flat(flatDepth = 1) {\n        return this._flatResolve(this._another, flatDepth);\n    }\n\n    private _flatResolve(arr, flatDepth = 1) {\n        //recursion break\n        if (flatDepth == 0) {\n            return arr;\n        }\n        let res = [];\n\n        let reFlat = item => {\n            item = Array.isArray(item) ? item : [item];\n            let mapped = this._flatResolve(item, flatDepth - 1);\n            res = res.concat(mapped);\n        };\n        arr.forEach(reFlat)\n\n        return new Es2019Array(...res);\n    }\n\n    private _flatMap(mapperFunction: Function): any {\n        let res = this.map(item => mapperFunction(item));\n        return this._flatResolve(res);\n    }\n}\n\n//let _Es2019Array = function<T>(...data: T[]) {};\n\n//let oldProto = Es2019Array.prototype;\n\nexport function _Es2019Array<T>(...data: T[]): Es2019Array_<T> {\n    let ret = new Es2019Array_<T>(...data);\n    let proxied = new Proxy<Es2019Array_<T>>(ret, {\n        get(target: Es2019Array_<unknown>, p: string | symbol, receiver: any): any {\n            if(\"symbol\" == typeof p) {\n\n                return target._another[p];\n            }\n            if(!isNaN(parseInt(p as string))) {\n                return target._another[p];\n            } else {\n                return target[p];\n            }\n        },\n\n        set(target, property, value): boolean {\n            target[property] = value;\n            target._another[property] = value;\n            return true;\n        }\n\n    });\n    return proxied;\n};\n\n/**\n * this is the switch between normal array and our shim\n * the shim is only provided in case the native browser\n * does not yet have flatMap support on arrays\n */\nexport var Es2019Array: any = (Array.prototype.flatMap) ? function<T>(...data: T[]): T[] {\n    // sometimes the typescript compiler produces\n    // an array without flatmap between boundaries (the result produces True for Array.isArray\n    // but has no flatMap function, could be a node issue also or Typescript!\n    // we remap that (could be related to: https://github.com/microsoft/TypeScript/issues/31033\n    // the check and remap fixes the issue which should not exist in the first place\n    return data?.flatMap ? data : _Es2019Array(...data);\n} : _Es2019Array;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n\n\n"],"names":["root","factory","exports","module","define","amd","a","i","this","Es2019Array_","Array","constructor","another","super","_another","flatMap","flatMapFun","_flatMap","flat","flatLevel","_flat","map","callbackfn","thisArg","_Es2019Array","prototype","call","concat","items","reverse","slice","start","end","splice","deleteCount","filter","predicate","reduce","initialValue","flatDepth","_flatResolve","arr","res","forEach","item","isArray","mapped","Es2019Array","mapperFunction","data","ret","Proxy","get","target","p","receiver","isNaN","parseInt","set","property","value","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","obj","prop","hasOwnProperty","r","Symbol","toStringTag","Monad","_value","fn","inVal","result","Optional","static","isAbsent","isPresent","presentRunnable","absent","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","fromNullable","getIf","preprocessKeys","currentPos","cnt","length","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","defaultVal","toJson","JSON","stringify","indexOf","substring","resolve","resolver","e","keys","split","replace","ValueEmbedder","rootElem","valueKey","newVal","alternative"],"sourceRoot":""}